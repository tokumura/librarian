/*
 * This file is generated by jOOQ.
 */
package com.tokumura.librarian.infrastructure.database.jooq


import com.tokumura.librarian.infrastructure.database.jooq.tables.Author
import com.tokumura.librarian.infrastructure.database.jooq.tables.Book
import com.tokumura.librarian.infrastructure.database.jooq.tables.FlywaySchemaHistory

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Public : SchemaImpl("public", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>public</code>
         */
        val PUBLIC: Public = Public()
    }

    /**
     * The table <code>public.author</code>.
     */
    val AUTHOR: Author get() = Author.AUTHOR

    /**
     * The table <code>public.book</code>.
     */
    val BOOK: Book get() = Book.BOOK

    /**
     * The table <code>public.flyway_schema_history</code>.
     */
    val FLYWAY_SCHEMA_HISTORY: FlywaySchemaHistory get() = FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getTables(): List<Table<*>> = listOf(
        Author.AUTHOR,
        Book.BOOK,
        FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY
    )
}
